(.venv) evgenijasakov@MacBook-Air-Evgenij Anti-plagiarism % pytest
========================================================================= test session starts =========================================================================
platform darwin -- Python 3.10.11, pytest-8.4.1, pluggy-1.6.0
django: version: 5.2.3, settings: core.settings (from ini)
rootdir: /Users/evgenijasakov/Anti-plagiarism
configfile: pytest.ini
plugins: django-4.11.1
collecting ... ^Z
zsh: suspended  pytest
(.venv) evgenijasakov@MacBook-Air-Evgenij Anti-plagiarism % pytest
========================================================================= test session starts =========================================================================
platform darwin -- Python 3.10.11, pytest-8.4.1, pluggy-1.6.0
django: version: 5.2.3, settings: core.settings (from ini)
rootdir: /Users/evgenijasakov/Anti-plagiarism
configfile: pytest.ini
plugins: django-4.11.1
collected 10 items

users/tests/test_users.py EEEEEEE                                                                                                                               [ 70%]
articles/tests/test_analysis.py ...                                                                                                                             [100%]

=============================================================================== ERRORS ================================================================================
________________________________________________________________ ERROR at setup of test_register_user _________________________________________________________________

self = <DatabaseWrapper vendor='postgresql' alias='__no_db__'>

    @async_unsafe
    def ensure_connection(self):
        """Guarantee that a connection to the database is established."""
        if self.connection is None:
            if self.in_atomic_block and self.closed_in_transaction:
                raise ProgrammingError(
                    "Cannot open a new connection in an atomic block."
                )
            with self.wrap_database_errors:
>               self.connect()

.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=postgres client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'postgres', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

self = <DatabaseWrapper vendor='postgresql' alias='default'>

    @contextmanager
    def _nodb_cursor(self):
        cursor = None
        try:
>           with super()._nodb_cursor() as cursor:

.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:507:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py:135: in __enter__
    return next(self.gen)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:712: in _nodb_cursor
    with conn.cursor() as cursor:
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:320: in cursor
    return self._cursor()
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:296: in _cursor
    self.ensure_connection()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:278: in ensure_connection
    with self.wrap_database_errors:
.venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279: in ensure_connection
    self.connect()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=postgres client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'postgres', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

During handling of the above exception, another exception occurred:

self = <DatabaseWrapper vendor='postgresql' alias='default'>

    @async_unsafe
    def ensure_connection(self):
        """Guarantee that a connection to the database is established."""
        if self.connection is None:
            if self.in_atomic_block and self.closed_in_transaction:
                raise ProgrammingError(
                    "Cannot open a new connection in an atomic block."
                )
            with self.wrap_database_errors:
>               self.connect()

.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=prooftext client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'prooftext', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest '_django_db_marker' for <Function test_register_user>>

    @pytest.fixture(autouse=True)
    def _django_db_marker(request: pytest.FixtureRequest) -> None:
        """Implement the django_db marker, internal to pytest-django."""
        marker = request.node.get_closest_marker("django_db")
        if marker:
>           request.getfixturevalue("_django_db_helper")

.venv/lib/python3.10/site-packages/pytest_django/plugin.py:552:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/pytest_django/fixtures.py:198: in django_db_setup
    db_cfg = setup_databases(
.venv/lib/python3.10/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.10/site-packages/django/db/backends/base/creation.py:62: in create_test_db
    self._create_test_db(verbosity, autoclobber, keepdb)
.venv/lib/python3.10/site-packages/django/db/backends/base/creation.py:202: in _create_test_db
    with self._nodb_cursor() as cursor:
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py:135: in __enter__
    return next(self.gen)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:533: in _nodb_cursor
    with conn.cursor() as cursor:
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:320: in cursor
    return self._cursor()
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:296: in _cursor
    self.ensure_connection()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:278: in ensure_connection
    with self.wrap_database_errors:
.venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279: in ensure_connection
    self.connect()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=prooftext client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'prooftext', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError
__________________________________________________________________ ERROR at setup of test_login_user __________________________________________________________________

self = <DatabaseWrapper vendor='postgresql' alias='__no_db__'>

    @async_unsafe
    def ensure_connection(self):
        """Guarantee that a connection to the database is established."""
        if self.connection is None:
            if self.in_atomic_block and self.closed_in_transaction:
                raise ProgrammingError(
                    "Cannot open a new connection in an atomic block."
                )
            with self.wrap_database_errors:
>               self.connect()

.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=postgres client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'postgres', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

self = <DatabaseWrapper vendor='postgresql' alias='default'>

    @contextmanager
    def _nodb_cursor(self):
        cursor = None
        try:
>           with super()._nodb_cursor() as cursor:

.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:507:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py:135: in __enter__
    return next(self.gen)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:712: in _nodb_cursor
    with conn.cursor() as cursor:
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:320: in cursor
    return self._cursor()
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:296: in _cursor
    self.ensure_connection()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:278: in ensure_connection
    with self.wrap_database_errors:
.venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279: in ensure_connection
    self.connect()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=postgres client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'postgres', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

During handling of the above exception, another exception occurred:

self = <DatabaseWrapper vendor='postgresql' alias='default'>

    @async_unsafe
    def ensure_connection(self):
        """Guarantee that a connection to the database is established."""
        if self.connection is None:
            if self.in_atomic_block and self.closed_in_transaction:
                raise ProgrammingError(
                    "Cannot open a new connection in an atomic block."
                )
            with self.wrap_database_errors:
>               self.connect()

.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=prooftext client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'prooftext', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest '_django_db_marker' for <Function test_login_user>>

    @pytest.fixture(autouse=True)
    def _django_db_marker(request: pytest.FixtureRequest) -> None:
        """Implement the django_db marker, internal to pytest-django."""
        marker = request.node.get_closest_marker("django_db")
        if marker:
>           request.getfixturevalue("_django_db_helper")

.venv/lib/python3.10/site-packages/pytest_django/plugin.py:552:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/pytest_django/fixtures.py:198: in django_db_setup
    db_cfg = setup_databases(
.venv/lib/python3.10/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.10/site-packages/django/db/backends/base/creation.py:62: in create_test_db
    self._create_test_db(verbosity, autoclobber, keepdb)
.venv/lib/python3.10/site-packages/django/db/backends/base/creation.py:202: in _create_test_db
    with self._nodb_cursor() as cursor:
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py:135: in __enter__
    return next(self.gen)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:533: in _nodb_cursor
    with conn.cursor() as cursor:
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:320: in cursor
    return self._cursor()
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:296: in _cursor
    self.ensure_connection()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:278: in ensure_connection
    with self.wrap_database_errors:
.venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279: in ensure_connection
    self.connect()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=prooftext client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'prooftext', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError
_________________________________________________________________ ERROR at setup of test_logout_user __________________________________________________________________

self = <DatabaseWrapper vendor='postgresql' alias='__no_db__'>

    @async_unsafe
    def ensure_connection(self):
        """Guarantee that a connection to the database is established."""
        if self.connection is None:
            if self.in_atomic_block and self.closed_in_transaction:
                raise ProgrammingError(
                    "Cannot open a new connection in an atomic block."
                )
            with self.wrap_database_errors:
>               self.connect()

.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=postgres client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'postgres', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

self = <DatabaseWrapper vendor='postgresql' alias='default'>

    @contextmanager
    def _nodb_cursor(self):
        cursor = None
        try:
>           with super()._nodb_cursor() as cursor:

.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:507:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py:135: in __enter__
    return next(self.gen)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:712: in _nodb_cursor
    with conn.cursor() as cursor:
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:320: in cursor
    return self._cursor()
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:296: in _cursor
    self.ensure_connection()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:278: in ensure_connection
    with self.wrap_database_errors:
.venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279: in ensure_connection
    self.connect()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=postgres client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'postgres', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

During handling of the above exception, another exception occurred:

self = <DatabaseWrapper vendor='postgresql' alias='default'>

    @async_unsafe
    def ensure_connection(self):
        """Guarantee that a connection to the database is established."""
        if self.connection is None:
            if self.in_atomic_block and self.closed_in_transaction:
                raise ProgrammingError(
                    "Cannot open a new connection in an atomic block."
                )
            with self.wrap_database_errors:
>               self.connect()

.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=prooftext client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'prooftext', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest '_django_db_marker' for <Function test_logout_user>>

    @pytest.fixture(autouse=True)
    def _django_db_marker(request: pytest.FixtureRequest) -> None:
        """Implement the django_db marker, internal to pytest-django."""
        marker = request.node.get_closest_marker("django_db")
        if marker:
>           request.getfixturevalue("_django_db_helper")

.venv/lib/python3.10/site-packages/pytest_django/plugin.py:552:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/pytest_django/fixtures.py:198: in django_db_setup
    db_cfg = setup_databases(
.venv/lib/python3.10/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.10/site-packages/django/db/backends/base/creation.py:62: in create_test_db
    self._create_test_db(verbosity, autoclobber, keepdb)
.venv/lib/python3.10/site-packages/django/db/backends/base/creation.py:202: in _create_test_db
    with self._nodb_cursor() as cursor:
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py:135: in __enter__
    return next(self.gen)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:533: in _nodb_cursor
    with conn.cursor() as cursor:
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:320: in cursor
    return self._cursor()
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:296: in _cursor
    self.ensure_connection()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:278: in ensure_connection
    with self.wrap_database_errors:
.venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279: in ensure_connection
    self.connect()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=prooftext client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'prooftext', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError
_________________________________________________________ ERROR at setup of test_profile_view_requires_login __________________________________________________________

self = <DatabaseWrapper vendor='postgresql' alias='__no_db__'>

    @async_unsafe
    def ensure_connection(self):
        """Guarantee that a connection to the database is established."""
        if self.connection is None:
            if self.in_atomic_block and self.closed_in_transaction:
                raise ProgrammingError(
                    "Cannot open a new connection in an atomic block."
                )
            with self.wrap_database_errors:
>               self.connect()

.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=postgres client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'postgres', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

self = <DatabaseWrapper vendor='postgresql' alias='default'>

    @contextmanager
    def _nodb_cursor(self):
        cursor = None
        try:
>           with super()._nodb_cursor() as cursor:

.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:507:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py:135: in __enter__
    return next(self.gen)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:712: in _nodb_cursor
    with conn.cursor() as cursor:
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:320: in cursor
    return self._cursor()
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:296: in _cursor
    self.ensure_connection()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:278: in ensure_connection
    with self.wrap_database_errors:
.venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279: in ensure_connection
    self.connect()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=postgres client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'postgres', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

During handling of the above exception, another exception occurred:

self = <DatabaseWrapper vendor='postgresql' alias='default'>

    @async_unsafe
    def ensure_connection(self):
        """Guarantee that a connection to the database is established."""
        if self.connection is None:
            if self.in_atomic_block and self.closed_in_transaction:
                raise ProgrammingError(
                    "Cannot open a new connection in an atomic block."
                )
            with self.wrap_database_errors:
>               self.connect()

.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=prooftext client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'prooftext', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest '_django_db_marker' for <Function test_profile_view_requires_login>>

    @pytest.fixture(autouse=True)
    def _django_db_marker(request: pytest.FixtureRequest) -> None:
        """Implement the django_db marker, internal to pytest-django."""
        marker = request.node.get_closest_marker("django_db")
        if marker:
>           request.getfixturevalue("_django_db_helper")

.venv/lib/python3.10/site-packages/pytest_django/plugin.py:552:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/pytest_django/fixtures.py:198: in django_db_setup
    db_cfg = setup_databases(
.venv/lib/python3.10/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.10/site-packages/django/db/backends/base/creation.py:62: in create_test_db
    self._create_test_db(verbosity, autoclobber, keepdb)
.venv/lib/python3.10/site-packages/django/db/backends/base/creation.py:202: in _create_test_db
    with self._nodb_cursor() as cursor:
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py:135: in __enter__
    return next(self.gen)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:533: in _nodb_cursor
    with conn.cursor() as cursor:
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:320: in cursor
    return self._cursor()
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:296: in _cursor
    self.ensure_connection()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:278: in ensure_connection
    with self.wrap_database_errors:
.venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279: in ensure_connection
    self.connect()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=prooftext client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'prooftext', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError
__________________________________________________________ ERROR at setup of test_profile_view_authenticated __________________________________________________________

self = <DatabaseWrapper vendor='postgresql' alias='__no_db__'>

    @async_unsafe
    def ensure_connection(self):
        """Guarantee that a connection to the database is established."""
        if self.connection is None:
            if self.in_atomic_block and self.closed_in_transaction:
                raise ProgrammingError(
                    "Cannot open a new connection in an atomic block."
                )
            with self.wrap_database_errors:
>               self.connect()

.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=postgres client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'postgres', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

self = <DatabaseWrapper vendor='postgresql' alias='default'>

    @contextmanager
    def _nodb_cursor(self):
        cursor = None
        try:
>           with super()._nodb_cursor() as cursor:

.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:507:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py:135: in __enter__
    return next(self.gen)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:712: in _nodb_cursor
    with conn.cursor() as cursor:
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:320: in cursor
    return self._cursor()
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:296: in _cursor
    self.ensure_connection()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:278: in ensure_connection
    with self.wrap_database_errors:
.venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279: in ensure_connection
    self.connect()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=postgres client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'postgres', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

During handling of the above exception, another exception occurred:

self = <DatabaseWrapper vendor='postgresql' alias='default'>

    @async_unsafe
    def ensure_connection(self):
        """Guarantee that a connection to the database is established."""
        if self.connection is None:
            if self.in_atomic_block and self.closed_in_transaction:
                raise ProgrammingError(
                    "Cannot open a new connection in an atomic block."
                )
            with self.wrap_database_errors:
>               self.connect()

.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=prooftext client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'prooftext', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest '_django_db_marker' for <Function test_profile_view_authenticated>>

    @pytest.fixture(autouse=True)
    def _django_db_marker(request: pytest.FixtureRequest) -> None:
        """Implement the django_db marker, internal to pytest-django."""
        marker = request.node.get_closest_marker("django_db")
        if marker:
>           request.getfixturevalue("_django_db_helper")

.venv/lib/python3.10/site-packages/pytest_django/plugin.py:552:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/pytest_django/fixtures.py:198: in django_db_setup
    db_cfg = setup_databases(
.venv/lib/python3.10/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.10/site-packages/django/db/backends/base/creation.py:62: in create_test_db
    self._create_test_db(verbosity, autoclobber, keepdb)
.venv/lib/python3.10/site-packages/django/db/backends/base/creation.py:202: in _create_test_db
    with self._nodb_cursor() as cursor:
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py:135: in __enter__
    return next(self.gen)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:533: in _nodb_cursor
    with conn.cursor() as cursor:
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:320: in cursor
    return self._cursor()
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:296: in _cursor
    self.ensure_connection()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:278: in ensure_connection
    with self.wrap_database_errors:
.venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279: in ensure_connection
    self.connect()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=prooftext client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'prooftext', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError
________________________________________________________________ ERROR at setup of test_update_profile ________________________________________________________________

self = <DatabaseWrapper vendor='postgresql' alias='__no_db__'>

    @async_unsafe
    def ensure_connection(self):
        """Guarantee that a connection to the database is established."""
        if self.connection is None:
            if self.in_atomic_block and self.closed_in_transaction:
                raise ProgrammingError(
                    "Cannot open a new connection in an atomic block."
                )
            with self.wrap_database_errors:
>               self.connect()

.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=postgres client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'postgres', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

self = <DatabaseWrapper vendor='postgresql' alias='default'>

    @contextmanager
    def _nodb_cursor(self):
        cursor = None
        try:
>           with super()._nodb_cursor() as cursor:

.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:507:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py:135: in __enter__
    return next(self.gen)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:712: in _nodb_cursor
    with conn.cursor() as cursor:
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:320: in cursor
    return self._cursor()
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:296: in _cursor
    self.ensure_connection()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:278: in ensure_connection
    with self.wrap_database_errors:
.venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279: in ensure_connection
    self.connect()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=postgres client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'postgres', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

During handling of the above exception, another exception occurred:

self = <DatabaseWrapper vendor='postgresql' alias='default'>

    @async_unsafe
    def ensure_connection(self):
        """Guarantee that a connection to the database is established."""
        if self.connection is None:
            if self.in_atomic_block and self.closed_in_transaction:
                raise ProgrammingError(
                    "Cannot open a new connection in an atomic block."
                )
            with self.wrap_database_errors:
>               self.connect()

.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=prooftext client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'prooftext', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest '_django_db_marker' for <Function test_update_profile>>

    @pytest.fixture(autouse=True)
    def _django_db_marker(request: pytest.FixtureRequest) -> None:
        """Implement the django_db marker, internal to pytest-django."""
        marker = request.node.get_closest_marker("django_db")
        if marker:
>           request.getfixturevalue("_django_db_helper")

.venv/lib/python3.10/site-packages/pytest_django/plugin.py:552:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/pytest_django/fixtures.py:198: in django_db_setup
    db_cfg = setup_databases(
.venv/lib/python3.10/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.10/site-packages/django/db/backends/base/creation.py:62: in create_test_db
    self._create_test_db(verbosity, autoclobber, keepdb)
.venv/lib/python3.10/site-packages/django/db/backends/base/creation.py:202: in _create_test_db
    with self._nodb_cursor() as cursor:
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py:135: in __enter__
    return next(self.gen)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:533: in _nodb_cursor
    with conn.cursor() as cursor:
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:320: in cursor
    return self._cursor()
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:296: in _cursor
    self.ensure_connection()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:278: in ensure_connection
    with self.wrap_database_errors:
.venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279: in ensure_connection
    self.connect()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=prooftext client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'prooftext', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError
________________________________________________________________ ERROR at setup of test_delete_account ________________________________________________________________

self = <DatabaseWrapper vendor='postgresql' alias='__no_db__'>

    @async_unsafe
    def ensure_connection(self):
        """Guarantee that a connection to the database is established."""
        if self.connection is None:
            if self.in_atomic_block and self.closed_in_transaction:
                raise ProgrammingError(
                    "Cannot open a new connection in an atomic block."
                )
            with self.wrap_database_errors:
>               self.connect()

.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=postgres client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'postgres', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

self = <DatabaseWrapper vendor='postgresql' alias='default'>

    @contextmanager
    def _nodb_cursor(self):
        cursor = None
        try:
>           with super()._nodb_cursor() as cursor:

.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:507:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py:135: in __enter__
    return next(self.gen)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:712: in _nodb_cursor
    with conn.cursor() as cursor:
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:320: in cursor
    return self._cursor()
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:296: in _cursor
    self.ensure_connection()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:278: in ensure_connection
    with self.wrap_database_errors:
.venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279: in ensure_connection
    self.connect()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=postgres client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'postgres', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

During handling of the above exception, another exception occurred:

self = <DatabaseWrapper vendor='postgresql' alias='default'>

    @async_unsafe
    def ensure_connection(self):
        """Guarantee that a connection to the database is established."""
        if self.connection is None:
            if self.in_atomic_block and self.closed_in_transaction:
                raise ProgrammingError(
                    "Cannot open a new connection in an atomic block."
                )
            with self.wrap_database_errors:
>               self.connect()

.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=prooftext client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'prooftext', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       psycopg2.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError

The above exception was the direct cause of the following exception:

request = <SubRequest '_django_db_marker' for <Function test_delete_account>>

    @pytest.fixture(autouse=True)
    def _django_db_marker(request: pytest.FixtureRequest) -> None:
        """Implement the django_db marker, internal to pytest-django."""
        marker = request.node.get_closest_marker("django_db")
        if marker:
>           request.getfixturevalue("_django_db_helper")

.venv/lib/python3.10/site-packages/pytest_django/plugin.py:552:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv/lib/python3.10/site-packages/pytest_django/fixtures.py:198: in django_db_setup
    db_cfg = setup_databases(
.venv/lib/python3.10/site-packages/django/test/utils.py:204: in setup_databases
    connection.creation.create_test_db(
.venv/lib/python3.10/site-packages/django/db/backends/base/creation.py:62: in create_test_db
    self._create_test_db(verbosity, autoclobber, keepdb)
.venv/lib/python3.10/site-packages/django/db/backends/base/creation.py:202: in _create_test_db
    with self._nodb_cursor() as cursor:
/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/contextlib.py:135: in __enter__
    return next(self.gen)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:533: in _nodb_cursor
    with conn.cursor() as cursor:
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:320: in cursor
    return self._cursor()
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:296: in _cursor
    self.ensure_connection()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:278: in ensure_connection
    with self.wrap_database_errors:
.venv/lib/python3.10/site-packages/django/db/utils.py:91: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:279: in ensure_connection
    self.connect()
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/base/base.py:256: in connect
    self.connection = self.get_new_connection(conn_params)
.venv/lib/python3.10/site-packages/django/utils/asyncio.py:26: in inner
    return func(*args, **kwargs)
.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:332: in get_new_connection
    connection = self.Database.connect(**conn_params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

dsn = 'dbname=prooftext client_encoding=UTF8 user=prooftext_user password=passwd123 host=localhost port=5432', connection_factory = None
cursor_factory = <class 'psycopg2.extensions.cursor'>, kwargs = {'client_encoding': 'UTF8', 'dbname': 'prooftext', 'host': 'localhost', 'password': 'passwd123', ...}
kwasync = {}

    def connect(dsn=None, connection_factory=None, cursor_factory=None, **kwargs):
        """
        Create a new database connection.

        The connection parameters can be specified as a string:

            conn = psycopg2.connect("dbname=test user=postgres password=secret")

        or using a set of keyword arguments:

            conn = psycopg2.connect(database="test", user="postgres", password="secret")

        Or as a mix of both. The basic connection parameters are:

        - *dbname*: the database name
        - *database*: the database name (only as keyword argument)
        - *user*: user name used to authenticate
        - *password*: password used to authenticate
        - *host*: database host address (defaults to UNIX socket if not provided)
        - *port*: connection port number (defaults to 5432 if not provided)

        Using the *connection_factory* parameter a different class or connections
        factory can be specified. It should be a callable object taking a dsn
        argument.

        Using the *cursor_factory* parameter, a new default cursor factory will be
        used by cursor().

        Using *async*=True an asynchronous connection will be created. *async_* is
        a valid alias (for Python versions where ``async`` is a keyword).

        Any other keyword parameter will be passed to the underlying client
        library: the list of supported parameters depends on the library version.

        """
        kwasync = {}
        if 'async' in kwargs:
            kwasync['async'] = kwargs.pop('async')
        if 'async_' in kwargs:
            kwasync['async_'] = kwargs.pop('async_')

        dsn = _ext.make_dsn(dsn, **kwargs)
>       conn = _connect(dsn, connection_factory=connection_factory, **kwasync)
E       django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist

.venv/lib/python3.10/site-packages/psycopg2/__init__.py:122: OperationalError
========================================================================== warnings summary ===========================================================================
users/tests/test_users.py::test_register_user
  /Users/evgenijasakov/Anti-plagiarism/.venv/lib/python3.10/site-packages/django/db/backends/postgresql/base.py:512: RuntimeWarning: Normally Django will use a connection to the 'postgres' database to avoid running initialization queries against the production database when it's not needed (for example, when running tests). Django was unable to create a connection to the 'postgres' database and will use the first PostgreSQL database instead.
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================================================================= short test summary info =======================================================================
ERROR users/tests/test_users.py::test_register_user - django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist
ERROR users/tests/test_users.py::test_login_user - django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist
ERROR users/tests/test_users.py::test_logout_user - django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist
ERROR users/tests/test_users.py::test_profile_view_requires_login - django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist
ERROR users/tests/test_users.py::test_profile_view_authenticated - django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist
ERROR users/tests/test_users.py::test_update_profile - django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist
ERROR users/tests/test_users.py::test_delete_account - django.db.utils.OperationalError: connection to server at "localhost" (127.0.0.1), port 5432 failed: FATAL:  role "prooftext_user" does not exist
=============================================================== 3 passed, 1 warning, 7 errors in 12.02s ===============================================================
(.venv) evgenijasakov@MacBook-Air-Evgenij Anti-plagiarism %
